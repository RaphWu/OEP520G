<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:converters="clr-namespace:MaterialDesignThemes.Wpf.Converters;assembly=MaterialDesignThemes.Wpf"
    xmlns:system="clr-namespace:System;assembly=System.RunTime"
    xmlns:wpf="http://materialdesigninxaml.net/winfx/xaml/themes">

    <!--  MaterialDesignThemes自訂顏色  -->
    <!--  primary  -->
    <SolidColorBrush x:Key="PrimaryHueLightBrush" Color="#67A0C6" />
    <SolidColorBrush x:Key="PrimaryHueLightForegroundBrush" Color="MidnightBlue" />
    <SolidColorBrush x:Key="PrimaryHueMidBrush" Color="#236FA1" />
    <SolidColorBrush x:Key="PrimaryHueMidForegroundBrush" Color="White" />
    <SolidColorBrush x:Key="PrimaryHueDarkBrush" Color="#0D476E" />
    <SolidColorBrush x:Key="PrimaryHueDarkForegroundBrush" Color="White" />

    <!--<SolidColorBrush x:Key="PrimaryHueLightBrush" Color="#4FB3BF" />
            <SolidColorBrush x:Key="PrimaryHueLightForegroundBrush" Color="MidnightBlue" />
            <SolidColorBrush x:Key="PrimaryHueMidBrush" Color="#00838F" />
            <SolidColorBrush x:Key="PrimaryHueMidForegroundBrush" Color="White" />
            <SolidColorBrush x:Key="PrimaryHueDarkBrush" Color="#005662" />
            <SolidColorBrush x:Key="PrimaryHueDarkForegroundBrush" Color="White" />-->
    <!--  accent  -->
    <SolidColorBrush x:Key="SecondaryAccentBrush" Color="#BA4A00" />
    <SolidColorBrush x:Key="SecondaryAccentForegroundBrush" Color="White" />

    <!--<SolidColorBrush x:Key="SecondaryAccentBrush" Color="#E64A19" />
            <SolidColorBrush x:Key="SecondaryAccentForegroundBrush" Color="White" />-->

    <!--  選擇列  -->
    <SolidColorBrush x:Key="MaterialDesignSelection" Color="#FFD69E" />
    <SolidColorBrush x:Key="MaterialDesignDivider" Color="#FFE9CB" />

    <!--  Control自訂顏色  -->
    <Style TargetType="{x:Type Label}">
        <Setter Property="TextBlock.Foreground" Value="Black" />
    </Style>

    <Style
        x:Key="MaterialDesignTextBox"
        BasedOn="{StaticResource MaterialDesignTextBox}"
        TargetType="{x:Type TextBox}">
        <Setter Property="TextBlock.Foreground" Value="Black" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
    </Style>

    <Style
        x:Key="MaterialDesignComboBox"
        BasedOn="{StaticResource MaterialDesignComboBox}"
        TargetType="{x:Type ComboBox}">
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
    </Style>

    <Style
        x:Key="MaterialDesignRaisedButton"
        BasedOn="{StaticResource MaterialDesignRaisedButton}"
        TargetType="{x:Type Button}">
        <Setter Property="TextBlock.TextAlignment" Value="Center" />
        <Setter Property="TextBlock.FontWeight" Value="Regular" />
        <Setter Property="TextBlock.FontSize" Value="14" />
    </Style>

    <Style
        x:Key="MaterialDesignRaisedAccentButton"
        BasedOn="{StaticResource MaterialDesignRaisedAccentButton}"
        TargetType="{x:Type Button}">
        <Setter Property="TextBlock.TextAlignment" Value="Center" />
        <Setter Property="TextBlock.FontWeight" Value="Regular" />
        <Setter Property="TextBlock.FontSize" Value="14" />
    </Style>

    <Style
        x:Key="MaterialDesignTabRadioButton"
        BasedOn="{StaticResource MaterialDesignTabRadioButton}"
        TargetType="{x:Type RadioButton}">
        <Setter Property="TextBlock.FontWeight" Value="Regular" />
        <Setter Property="TextBlock.FontSize" Value="14" />
        <Setter Property="TextBlock.TextAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource PrimaryHueLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueLightForegroundBrush}" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <ProgressBar
                            x:Name="ProgressBar"
                            Grid.Row="0"
                            Grid.RowSpan="2"
                            Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ButtonBase}}, Path=ActualWidth}"
                            Height="{TemplateBinding Height}"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.IndicatorBackground)}"
                            BorderThickness="0"
                            Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.IndicatorForeground)}"
                            IsIndeterminate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.IsIndeterminate)}"
                            Maximum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.Maximum)}"
                            Minimum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.Minimum)}"
                            Opacity="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.Opacity)}"
                            Style="{DynamicResource MaterialDesignLinearProgressBar}"
                            Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.IsIndicatorVisible), Converter={StaticResource BooleanToVisibilityConverter}}"
                            Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.Value)}" />
                        <Border
                            Grid.Row="0"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{DynamicResource PrimaryHueLightBrush}"
                            BorderThickness="0"
                            CornerRadius="2">
                            <wpf:Ripple
                                x:Name="contentPresenter"
                                Padding="{TemplateBinding Padding}"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                Content="{TemplateBinding Content}"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                Focusable="False"
                                Opacity="1"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <Border
                            x:Name="SelectionHighlightBorder"
                            Grid.Row="1"
                            Height="2"
                            Background="{TemplateBinding BorderBrush}"
                            Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SecondaryAccentBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource SecondaryAccentForegroundBrush}" />
                            <Setter Property="BorderThickness" Value="0" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.23" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="MaterialDesignActionToggleButton"
        BasedOn="{StaticResource MaterialDesignActionToggleButton}"
        TargetType="{x:Type ToggleButton}">
        <Setter Property="TextBlock.FontWeight" Value="Regular" />
        <Setter Property="TextBlock.FontSize" Value="14" />
        <Setter Property="TextBlock.TextAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource PrimaryHueDarkBrush}" />
        <Setter Property="Foreground" Value="Gold" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <ProgressBar
                            x:Name="ProgressBar"
                            Grid.Row="0"
                            Grid.RowSpan="2"
                            Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ButtonBase}}, Path=ActualWidth}"
                            Height="{TemplateBinding Height}"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.IndicatorBackground)}"
                            BorderThickness="0"
                            Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.IndicatorForeground)}"
                            IsIndeterminate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.IsIndeterminate)}"
                            Maximum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.Maximum)}"
                            Minimum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.Minimum)}"
                            Opacity="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.Opacity)}"
                            Style="{DynamicResource MaterialDesignLinearProgressBar}"
                            Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.IsIndicatorVisible), Converter={StaticResource BooleanToVisibilityConverter}}"
                            Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.Value)}" />
                        <Border
                            x:Name="contentBorder"
                            Grid.Row="0"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{DynamicResource PrimaryHueMidBrush}"
                            BorderThickness="1"
                            CornerRadius="2">
                            <wpf:Ripple
                                x:Name="contentPresenter"
                                Padding="{TemplateBinding Padding}"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                Content="{TemplateBinding Content}"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                Focusable="False"
                                Opacity="1"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <Border
                            x:Name="SelectionHighlightBorder"
                            Grid.Row="1"
                            Height="2"
                            Background="{TemplateBinding BorderBrush}"
                            Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SecondaryAccentBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource PrimaryHueDarkForegroundBrush}" />
                            <Setter TargetName="contentBorder" Property="BorderBrush" Value="{DynamicResource PrimaryHueDarkBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.23" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>